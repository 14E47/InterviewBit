# Definition for an interval.
class Interval:
    def __init__(self, s=0, e=0):
        self.start = s
        self.end = e

class Solution:
    # @param intervals, a list of Intervals
    # @return a list of Interval
    def merge(self, intervals):
        intervals.sort(key=lambda x: x.start)
        merged = []
        for i in intervals:
            if len(merged) == 0:
                merged.append(i)
            else:
                prev = merged[-1]
                if i.start > prev.end:
                    merged.append(i)
                else:
                    merged[-1] = Interval(min(prev.start, i.start), max(prev.end, i.end))
        return merged



# i = [(1,3),(2,6),(8,10),(15,18)]
i = [ (1, 10), (2, 9), (3, 8), (4, 7), (5, 6), (6, 6) ]
# i = [ (30, 63), (66, 94), (36, 87), (16, 86), (26, 85), (24, 50), (17, 84), (5, 25), (67, 81), (23, 54), (84, 99), (48, 85), (23, 28), (3, 86), (63, 79), (18, 73), (6, 68), (34, 40), (61, 66), (60, 96), (95, 99), (1, 10), (4, 82), (19, 78), (23, 61), (30, 45), (53, 87), (10, 42), (80, 93), (33, 73), (64, 65), (29, 71), (73, 89), (2, 98), (62, 67), (84, 98), (43, 58), (20, 45), (86, 92), (22, 100), (72, 74), (5, 52), (48, 56), (69, 93), (8, 98), (37, 47), (19, 45), (22, 99), (34, 97), (21, 80), (58, 77), (48, 66), (59, 91), (18, 33), (2, 7), (8, 92), (12, 32), (17, 83), (11, 16), (60, 75), (9, 11), (3, 61), (4, 18), (53, 68), (17, 39), (18, 93), (15, 55), (4, 34), (48, 85), (61, 65), (59, 77), (15, 37), (62, 82), (4, 78), (80, 96), (4, 42), (15, 48), (27, 45) ]
i = [ (54, 75), (56, 60), (61, 86), (22, 43), (56, 87), (32, 53), (14, 81), (64, 65), (9, 42), (12, 33), (22, 58), (84, 90), (27, 59), (41, 48), (43, 47), (22, 29), (16, 23), (41, 72), (15, 87), (20, 59), (45, 84), (14, 77), (72, 93), (20, 58), (47, 53), (25, 88), (5, 89), (34, 97), (14, 47) ]

iv = [Interval(k[0],k[1]) for k in i]
c = Solution().merge(iv)
for i in c:
    print(i.start, i.end)